{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:526: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:527: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:528: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:529: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:530: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:535: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams[\"figure.figsize\"] = (14,8)\n",
    "\n",
    "n_observations = 100\n",
    "xs = np.linspace(-3, 3, n_observations)\n",
    "ys = np.sin(xs) + np.random.uniform(-0.5, 0.5, n_observations)\n",
    "plt.scatter(xs, ys)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = tf.placeholder(tf.float32, name='X')\n",
    "Y = tf.placeholder(tf.float32, name='Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    }
   ],
   "source": [
    "W = tf.Variable(tf.random_normal([1]), name='weight')\n",
    "b = tf.Variable(tf.random_normal([1]), name='bias')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_pred = tf.add(tf.multiply(X, W), b)\n",
    "#添加高次项\n",
    "W_2 = tf.Variable(tf.random_normal([1]), name='weight_2')\n",
    "Y_pred = tf.add(tf.multiply(tf.pow(X, 2), W_2), Y_pred)\n",
    "W_3 = tf.Variable(tf.random_normal([1]), name='weight_3')\n",
    "Y_pred = tf.add(tf.multiply(tf.pow(X, 3), W_3), Y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_num = xs.shape[0]\n",
    "loss = tf.reduce_sum(tf.pow(Y_pred - Y, 2)) / sample_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/zhaoxiaoxiang/anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    }
   ],
   "source": [
    "learning_rate = 0.01\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0: 0.015242233885407791\n",
      "Epoch 20: 0.006342695601149444\n",
      "Epoch 40: 0.004654474355137963\n",
      "Epoch 60: 0.003499650237864709\n",
      "Epoch 80: 0.002710847339303655\n",
      "Epoch 100: 0.0021720566701694467\n",
      "Epoch 120: 0.001804054853114323\n",
      "Epoch 140: 0.0015527348851696844\n",
      "Epoch 160: 0.0013811370922920218\n",
      "Epoch 180: 0.0012640080327371074\n",
      "Epoch 200: 0.0011841013461438622\n",
      "Epoch 220: 0.00112961835518945\n",
      "Epoch 240: 0.0010925058266775523\n",
      "Epoch 260: 0.0010672561540962455\n",
      "Epoch 280: 0.0010501036317214485\n",
      "Epoch 300: 0.0010384767410448602\n",
      "Epoch 320: 0.0010306165262240618\n",
      "Epoch 340: 0.0010253208291783266\n",
      "Epoch 360: 0.0010217704160066887\n",
      "Epoch 380: 0.0010194036421971476\n",
      "Epoch 400: 0.0010178385559308368\n",
      "Epoch 420: 0.0010168157574810266\n",
      "Epoch 440: 0.001016156373858621\n",
      "Epoch 460: 0.001015740333781423\n",
      "Epoch 480: 0.001015485823504605\n",
      "Epoch 500: 0.0010153374814507287\n",
      "Epoch 520: 0.0010152579819254015\n",
      "Epoch 540: 0.0010152224727286807\n",
      "Epoch 560: 0.0010152144088081626\n",
      "Epoch 580: 0.0010152223789278026\n",
      "Epoch 600: 0.0010152394002116694\n",
      "Epoch 620: 0.0010152610459105206\n",
      "Epoch 640: 0.0010152841110785714\n",
      "Epoch 660: 0.0010153068147288379\n",
      "Epoch 680: 0.0010153286393272864\n",
      "Epoch 700: 0.0010153487318246945\n",
      "Epoch 720: 0.0010153664536984674\n",
      "Epoch 740: 0.0010153821352266812\n",
      "Epoch 760: 0.0010153961950513724\n",
      "Epoch 780: 0.001015408294036141\n",
      "Epoch 800: 0.0010154187256880417\n",
      "Epoch 820: 0.0010154277737694259\n",
      "Epoch 840: 0.0010154355407647714\n",
      "Epoch 860: 0.0010154421620803917\n",
      "Epoch 880: 0.0010154476675135271\n",
      "Epoch 900: 0.001015452673606\n",
      "Epoch 920: 0.0010154565741729593\n",
      "Epoch 940: 0.0010154600577860107\n",
      "Epoch 960: 0.0010154627401931448\n",
      "Epoch 980: 0.0010154652312919787\n"
     ]
    }
   ],
   "source": [
    "n_samples = xs.shape[0]\n",
    "with tf.Session() as sess:\n",
    "\t# 记得初始化所有变量\n",
    "\tsess.run(tf.global_variables_initializer()) \n",
    "\t\n",
    "\twriter = tf.summary.FileWriter('./graphs/polynomial_reg', sess.graph)\n",
    "\t\n",
    "\t# 训练模型\n",
    "\tfor i in range(1000):\n",
    "\t\ttotal_loss = 0\n",
    "\t\tfor x, y in zip(xs, ys):\n",
    "\t\t\t# 通过feed_dic把数据灌进去\n",
    "\t\t\t_, l = sess.run([optimizer, loss], feed_dict={X: x, Y:y}) \n",
    "\t\t\ttotal_loss += l\n",
    "\t\tif i%20 ==0:\n",
    "\t\t\tprint('Epoch {0}: {1}'.format(i, total_loss/n_samples))\n",
    "\n",
    "\t# 关闭writer\n",
    "\twriter.close()\n",
    "    # 取出w和b的值\n",
    "\tW, W_2, W_3, b = sess.run([W, W_2, W_3, b])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W:0.92027956\n",
      "W_2:0.010039297\n",
      "W_3:-0.10280428\n",
      "b:0.018015822\n"
     ]
    }
   ],
   "source": [
    "print(\"W:\"+str(W[0]))\n",
    "print(\"W_2:\"+str(W_2[0]))\n",
    "print(\"W_3:\"+str(W_3[0]))\n",
    "print(\"b:\"+str(b[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(xs, ys, 'bo', label='Real data')\n",
    "plt.plot(xs, xs*W + np.power(xs,2)*W_2 + np.power(xs,3)*W_3 + b, 'r', label='Predicted data')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
